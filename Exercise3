import numpy as np
import math
import subprocess
import collections


def build_factorbase(prime_file,n):
    prime_numbers =[]
    count = 0
    for word in prime_file.read().split():
        if(count < n):
            prime_numbers.append(int(word))
            count = count +1
        else:
            return prime_numbers



# Find all prime numbers using Sieve of Eratosthenes
def get_primes1(n):
    m = int(np.sqrt(n))
    is_prime = np.ones(n, dtype=bool)
    is_prime[:2] = False  # 0 and 1 are not primes

    for i in range(2, m):
        if is_prime[i] == False:
            continue
        is_prime[i * i::i] = False

    return np.nonzero(is_prime)[0]


# Find all prime numbers using brute-force.
def isprime(n):
    ''' Check if integer n is a prime '''
    n = abs(int(n))  # n is a positive integer
    if n < 2:  # 0 and 1 are not primes
        return False
    if n == 2:  # 2 is the only even prime number
        return True
    if not n & 1:  # all other even numbers are not primes
        return False
    # Range starts with 3 and only needs to go up the square root
    # of n for all odd numbers
    for x in range(3, int(n ** 0.5) + 1, 2):
        if n % x == 0:
            return False
    return True


# To apply a function to a numpy array, one have to vectorize the function
def get_primes2(n):
    vectorized_isprime = np.vectorize(isprime)
    a = np.arange(n)
    return a[vectorized_isprime(a)]


def prime_factors(s, factorbase):
    i = 0
    count_exp = {}
    temp = factorbase[len(factorbase)-1]
    while s > 1:
        temp = factorbase[i]
        count_exp[factorbase[i]] = 0
        while s % factorbase[i] == 0:
            count_exp[factorbase[i]] += 1
            if(factorbase[i]>s):
                return 0
            else:
                s /= factorbase[i]


        if (len(factorbase)-1) == i and s>1:
            return 0

        else:
            i = i + 1

    count_exp = collections.OrderedDict(sorted(count_exp.items()))

    return count_exp


def generate_primes(N, factorbase):
    vector_R = []
    vector_S= []
    vector_check = []
    n = 10000
    #vector_primes = []
    text_file = open("matrix.txt", "w")
    text_file.write(str(1010)+" "+str(len(factorbase))+ "\n")
    while len(vector_R) < 1010:

        for k in range(1, 3):
            for j in range(0, n):

                r = round(math.sqrt(k * N) + j,0)

                check_r=0
                if(len(vector_R)!=0):
                    for old_r in vector_R:
                        if r==old_r:
                            check_r =1;
                if(check_r == 0):
                    s=(r**2)%N
                    primes = prime_factors(s, factorbase)
                    vector_binary = ""

                    if (primes != 0):
                        for key in primes:
                            if(primes.get(key)%2==0):
                                vector_binary= vector_binary + "0" + " "
                            else:
                                vector_binary = vector_binary + "1" + " "

                        while len(vector_binary)<=2*len(factorbase):
                            vector_binary = vector_binary +"0" +" "


                        if(len(vector_check)==0):
                            vector_check.append(vector_binary)
                            text_file.write(vector_binary + "\n")
                            vector_R.append(r)
                            vector_S.append(s)

                        else:
                            boolean = 0
                            for string in vector_check:
                                if string == vector_binary:
                                    boolean =1
                            if boolean == 0:
                                text_file.write(vector_binary + "\n")
                                vector_check.append(vector_binary)
                                vector_R.append(r)
                                vector_S.append(s)
                                #vector_primes(primes)


                        if(len(vector_R)>=1010):
                            print len(vector_R)
                            text_file.close()
                            return vector_R

    print len(vector_R)
    text_file.close()
    return vector_R



def factors(x_vector):
     count = 0;
     for word in x_vector.read().split():
         if (count == 0 and count ==1 ):
             count +=1
             pass
         else:
              print word






N= 16637

prime_file = open("primtal.txt", "r")
factorbase = build_factorbase(prime_file,1000)
print len(factorbase)
generate_primes(N,factorbase)
subprocess.call(["g++", "gaussbin.cpp"])
subprocess.call("./a.out matrix.txt output.txt")
x_vector = open("output.txt")
factors(x_vector)





        #print tmp
#primes = generate_R(N,factorbase)[0]