import numpy as np
import math
from collections import Counter


# Find all prime numbers using Sieve of Eratosthenes
def get_primes1(n):
    m = int(np.sqrt(n))
    is_prime = np.ones(n, dtype=bool)
    is_prime[:2] = False  # 0 and 1 are not primes

    for i in range(2, m):
        if is_prime[i] == False:
            continue
        is_prime[i * i::i] = False

    return np.nonzero(is_prime)[0]


# Find all prime numbers using brute-force.
def isprime(n):
    ''' Check if integer n is a prime '''
    n = abs(int(n))  # n is a positive integer
    if n < 2:  # 0 and 1 are not primes
        return False
    if n == 2:  # 2 is the only even prime number
        return True
    if not n & 1:  # all other even numbers are not primes
        return False
    # Range starts with 3 and only needs to go up the square root
    # of n for all odd numbers
    for x in range(3, int(n ** 0.5) + 1, 2):
        if n % x == 0:
            return False
    return True


# To apply a function to a numpy array, one have to vectorize the function
def get_primes2(n):
    vectorized_isprime = np.vectorize(isprime)
    a = np.arange(n)
    return a[vectorized_isprime(a)]


def prime_factors(r, factorbase):
    i = 0
    count_exp = {}
    while r > 1:

        count_exp[factorbase[i]] = 0
        while r % factorbase[i] == 0:
            count_exp[factorbase[i]] += 1
            r /= factorbase[i]


        if (len(factorbase)-1) == i and r>1:
            return 0

        else:
            i = i + 1

    return count_exp


def generate_R(N, factorbase):
    vector_R = []
    n = 10000
    while len(vector_R) < 1010:
        print "Length vector:", len(vector_R)
        for k in range(1, 3):
            for j in range(0, n):

                r = round(math.sqrt(k * N) + j,0)

                check_r=0
                if(len(vector_R)!=0):
                    for old_r in vector_R:
                        if r==old_r:
                            check_r =1;
                if(check_r == 0):
                    primes = prime_factors(r, factorbase)
                    if(primes != 0):
                        if len(primes) != 0:
                            vector_R.append(r)
    return primes, vector_R



    #def binary_vector(primes):



factorbase = [2, 3, 5, 7, 11,13,17,19,23,29]
N= 16637
print generate_R(N,factorbase)
#primes = generate_R(N,factorbase)[0]